// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATAA.Migrations
{
    [DbContext(typeof(ManageAppDbContext))]
    partial class ManageAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATAA.Data.Entities.ChatRoom", b =>
                {
                    b.Property<string>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Admin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameRoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("Admin");

                    b.ToTable("chatRooms");
                });

            modelBuilder.Entity("DATAA.Data.Entities.ChatRoomUser", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID", "RoomID");

                    b.HasIndex("RoomID");

                    b.ToTable("chatRoomUsers");
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.Property<string>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeSend")
                        .HasColumnType("datetime2");

                    b.Property<string>("chatRoomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("chatUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageID");

                    b.HasIndex("SenderUserID");

                    b.HasIndex("chatRoomID");

                    b.HasIndex("chatUserID");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("SocialNetworking.Data.Entities.ChatUser", b =>
                {
                    b.Property<string>("ChatUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDuser1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDuser2")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatUserID");

                    b.HasIndex("IDuser1");

                    b.HasIndex("IDuser2");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("DATAA.Data.Entities.ChatRoom", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("chatRooms")
                        .HasForeignKey("Admin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATAA.Data.Entities.ChatRoomUser", b =>
                {
                    b.HasOne("DATAA.Data.Entities.ChatRoom", "room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "user")
                        .WithMany("chatRoomUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("room");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "UserSend")
                        .WithMany("Messages")
                        .HasForeignKey("SenderUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATAA.Data.Entities.ChatRoom", "chatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("chatRoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetworking.Data.Entities.ChatUser", "chatUser")
                        .WithMany("Messages")
                        .HasForeignKey("chatUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserSend");

                    b.Navigation("chatRoom");

                    b.Navigation("chatUser");
                });

            modelBuilder.Entity("SocialNetworking.Data.Entities.ChatUser", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User1")
                        .WithMany("chatUser1")
                        .HasForeignKey("IDuser1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User2")
                        .WithMany("chatUser2")
                        .HasForeignKey("IDuser2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("DATAA.Data.Entities.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("chatRoomUsers");

                    b.Navigation("chatRooms");

                    b.Navigation("chatUser1");

                    b.Navigation("chatUser2");
                });

            modelBuilder.Entity("SocialNetworking.Data.Entities.ChatUser", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
